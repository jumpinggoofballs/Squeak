"use strict";
// SQLite initial configuration
var Sqlite = require('nativescript-sqlite');
var SQL_config = {
    db_name: 'test.db',
};
// SQL_ prefix aliases : this is the only place in the application where one would have to interact directly with SQL queries
var initDB = new Sqlite(SQL_config.db_name);
function SQL_addFriendToDB(db, nickname) {
    return db.execSQL('INSERT INTO friends (nickname) VALUES (?)', [nickname]);
}
function SQL_getFriendsTable(db) {
    return db.all('SELECT * FROM friends');
}
function SQL_initFriendsTable(db) {
    return db.execSQL('CREATE TABLE IF NOT EXISTS friends (id INTEGER PRIMARY KEY AUTOINCREMENT, nickname TEXT)');
}
// END OF SQL_ prefixes
// Utility functions exposed to all other Views, which abstract away completely from the DB backend. 
exports.initFriendsData = function () {
    return new Promise(function (resolve, reject) {
        initDB
            .then(function (db) {
            SQL_initFriendsTable(db)
                .then(function () {
                resolve('Friends Table added successfully!');
            }, function (error) {
                reject('Failed to initialise the Friends Table: ' + error);
            });
        }, function (error) {
            reject('Failed to initialise Database: ' + error);
        });
    });
};
exports.addFriend = function (nickname) {
    return new Promise(function (resolve, reject) {
        initDB
            .then(function (db) {
            SQL_addFriendToDB(db, nickname)
                .then(function () {
                resolve('Friend added successfully!');
            }, function (error) {
                reject('Failed to add Friend: ' + error);
            });
        }, function (error) {
            reject('Failed to initialise Database: ' + error);
        });
    });
};
exports.getFriendsList = function () {
    return new Promise(function (resolve, reject) {
        initDB
            .then(function (db) {
            SQL_getFriendsTable(db)
                .then(function (rows) {
                var friendsList = [];
                for (var row in rows) {
                    friendsList.push({
                        nickname: rows[row][1]
                    });
                }
                resolve(friendsList);
            }, function (error) {
                reject('Failed to get Friends List: ' + error);
            });
        }, function (error) {
            reject('Failed to initialise Database: ' + error);
        });
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLXN0b3JlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLXN0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFHQSwrQkFBK0I7QUFDL0IsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDNUMsSUFBTSxVQUFVLEdBQUc7SUFDZixPQUFPLEVBQUUsU0FBUztDQUNyQixDQUFBO0FBR0QsNkhBQTZIO0FBQzdILElBQUksTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUU1QywyQkFBMkIsRUFBTyxFQUFFLFFBQWdCO0lBQ2hELE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLDJDQUEyQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUMvRSxDQUFDO0FBRUQsNkJBQTZCLEVBQU87SUFDaEMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRUQsOEJBQThCLEVBQU87SUFDakMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsMEZBQTBGLENBQUMsQ0FBQztBQUNsSCxDQUFDO0FBQ0QsdUJBQXVCO0FBR3ZCLHFHQUFxRztBQUMxRixRQUFBLGVBQWUsR0FBRztJQUN6QixNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtRQUMvQixNQUFNO2FBQ0QsSUFBSSxDQUFDLFVBQUEsRUFBRTtZQUNKLG9CQUFvQixDQUFDLEVBQUUsQ0FBQztpQkFDbkIsSUFBSSxDQUFDO2dCQUNGLE9BQU8sQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1lBQ2pELENBQUMsRUFBRSxVQUFBLEtBQUs7Z0JBQ0osTUFBTSxDQUFDLDBDQUEwQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQy9ELENBQUMsQ0FBQyxDQUFDO1FBQ1gsQ0FBQyxFQUFFLFVBQUEsS0FBSztZQUNKLE1BQU0sQ0FBQyxpQ0FBaUMsR0FBRyxLQUFLLENBQUMsQ0FBQztRQUN0RCxDQUFDLENBQUMsQ0FBQztJQUNYLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFBO0FBRVUsUUFBQSxTQUFTLEdBQUcsVUFBVSxRQUFnQjtJQUM3QyxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtRQUMvQixNQUFNO2FBQ0QsSUFBSSxDQUFDLFVBQUEsRUFBRTtZQUNKLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUM7aUJBQzFCLElBQUksQ0FBQztnQkFDRixPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQztZQUMxQyxDQUFDLEVBQUUsVUFBQSxLQUFLO2dCQUNKLE1BQU0sQ0FBQyx3QkFBd0IsR0FBRyxLQUFLLENBQUMsQ0FBQztZQUM3QyxDQUFDLENBQUMsQ0FBQztRQUNYLENBQUMsRUFBRSxVQUFBLEtBQUs7WUFDSixNQUFNLENBQUMsaUNBQWlDLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDdEQsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQTtBQUVVLFFBQUEsY0FBYyxHQUFHO0lBQ3hCLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1FBQy9CLE1BQU07YUFDRCxJQUFJLENBQUMsVUFBQSxFQUFFO1lBQ0osbUJBQW1CLENBQUMsRUFBRSxDQUFDO2lCQUNsQixJQUFJLENBQUMsVUFBQSxJQUFJO2dCQUNOLElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQztnQkFDckIsR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDbkIsV0FBVyxDQUFDLElBQUksQ0FBQzt3QkFDYixRQUFRLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDekIsQ0FBQyxDQUFDO2dCQUNQLENBQUM7Z0JBQ0QsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3pCLENBQUMsRUFBRSxVQUFBLEtBQUs7Z0JBQ0osTUFBTSxDQUFDLDhCQUE4QixHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQ25ELENBQUMsQ0FBQyxDQUFDO1FBQ1gsQ0FBQyxFQUFFLFVBQUEsS0FBSztZQUNKLE1BQU0sQ0FBQyxpQ0FBaUMsR0FBRyxLQUFLLENBQUMsQ0FBQztRQUN0RCxDQUFDLENBQUMsQ0FBQztJQUNYLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRnJpZW5kIH0gZnJvbSAnLi9hcHAtZGF0YS1tb2RlbCc7XG5cblxuLy8gU1FMaXRlIGluaXRpYWwgY29uZmlndXJhdGlvblxudmFyIFNxbGl0ZSA9IHJlcXVpcmUoJ25hdGl2ZXNjcmlwdC1zcWxpdGUnKTtcbmNvbnN0IFNRTF9jb25maWcgPSB7XG4gICAgZGJfbmFtZTogJ3Rlc3QuZGInLFxufVxuXG5cbi8vIFNRTF8gcHJlZml4IGFsaWFzZXMgOiB0aGlzIGlzIHRoZSBvbmx5IHBsYWNlIGluIHRoZSBhcHBsaWNhdGlvbiB3aGVyZSBvbmUgd291bGQgaGF2ZSB0byBpbnRlcmFjdCBkaXJlY3RseSB3aXRoIFNRTCBxdWVyaWVzXG52YXIgaW5pdERCID0gbmV3IFNxbGl0ZShTUUxfY29uZmlnLmRiX25hbWUpO1xuXG5mdW5jdGlvbiBTUUxfYWRkRnJpZW5kVG9EQihkYjogYW55LCBuaWNrbmFtZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGRiLmV4ZWNTUUwoJ0lOU0VSVCBJTlRPIGZyaWVuZHMgKG5pY2tuYW1lKSBWQUxVRVMgKD8pJywgW25pY2tuYW1lXSk7XG59XG5cbmZ1bmN0aW9uIFNRTF9nZXRGcmllbmRzVGFibGUoZGI6IGFueSkge1xuICAgIHJldHVybiBkYi5hbGwoJ1NFTEVDVCAqIEZST00gZnJpZW5kcycpO1xufVxuXG5mdW5jdGlvbiBTUUxfaW5pdEZyaWVuZHNUYWJsZShkYjogYW55KSB7XG4gICAgcmV0dXJuIGRiLmV4ZWNTUUwoJ0NSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIGZyaWVuZHMgKGlkIElOVEVHRVIgUFJJTUFSWSBLRVkgQVVUT0lOQ1JFTUVOVCwgbmlja25hbWUgVEVYVCknKTtcbn1cbi8vIEVORCBPRiBTUUxfIHByZWZpeGVzXG5cblxuLy8gVXRpbGl0eSBmdW5jdGlvbnMgZXhwb3NlZCB0byBhbGwgb3RoZXIgVmlld3MsIHdoaWNoIGFic3RyYWN0IGF3YXkgY29tcGxldGVseSBmcm9tIHRoZSBEQiBiYWNrZW5kLiBcbmV4cG9ydCB2YXIgaW5pdEZyaWVuZHNEYXRhID0gZnVuY3Rpb24gKCk6IFByb21pc2U8eyBsb2dNZXNzYWdlOiBzdHJpbmcgfT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGluaXREQlxuICAgICAgICAgICAgLnRoZW4oZGIgPT4ge1xuICAgICAgICAgICAgICAgIFNRTF9pbml0RnJpZW5kc1RhYmxlKGRiKVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCdGcmllbmRzIFRhYmxlIGFkZGVkIHN1Y2Nlc3NmdWxseSEnKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCdGYWlsZWQgdG8gaW5pdGlhbGlzZSB0aGUgRnJpZW5kcyBUYWJsZTogJyArIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCdGYWlsZWQgdG8gaW5pdGlhbGlzZSBEYXRhYmFzZTogJyArIGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5leHBvcnQgdmFyIGFkZEZyaWVuZCA9IGZ1bmN0aW9uIChuaWNrbmFtZTogc3RyaW5nKTogUHJvbWlzZTx7IGxvZ01lc3NhZ2U6IHN0cmluZyB9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgaW5pdERCXG4gICAgICAgICAgICAudGhlbihkYiA9PiB7XG4gICAgICAgICAgICAgICAgU1FMX2FkZEZyaWVuZFRvREIoZGIsIG5pY2tuYW1lKVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCdGcmllbmQgYWRkZWQgc3VjY2Vzc2Z1bGx5IScpO1xuICAgICAgICAgICAgICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoJ0ZhaWxlZCB0byBhZGQgRnJpZW5kOiAnICsgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICByZWplY3QoJ0ZhaWxlZCB0byBpbml0aWFsaXNlIERhdGFiYXNlOiAnICsgZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCB2YXIgZ2V0RnJpZW5kc0xpc3QgPSBmdW5jdGlvbiAoKTogUHJvbWlzZTx7IGZyaWVuZHNMaXN0OiBBcnJheTxPYmplY3Q+IH0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBpbml0REJcbiAgICAgICAgICAgIC50aGVuKGRiID0+IHtcbiAgICAgICAgICAgICAgICBTUUxfZ2V0RnJpZW5kc1RhYmxlKGRiKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihyb3dzID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmcmllbmRzTGlzdCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcm93IGluIHJvd3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmllbmRzTGlzdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmlja25hbWU6IHJvd3Nbcm93XVsxXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShmcmllbmRzTGlzdCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgnRmFpbGVkIHRvIGdldCBGcmllbmRzIExpc3Q6ICcgKyBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdCgnRmFpbGVkIHRvIGluaXRpYWxpc2UgRGF0YWJhc2U6ICcgKyBlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICB9KTtcbn0iXX0=